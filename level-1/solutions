#Assessment-1
âœ… Assignment: Multiple Containers with Different Images

ðŸŽ¯ Objective
Demonstrate how to run multiple containers with different images and check their status.

Step1 - Run the Containers
# Run nginx on port 80
docker run -d --name nginx-server -p 80:80 nginx

# Run httpd (Apache) on port 8080
docker run -d --name apache-server -p 8080:80 httpd

# Run MySQL with random root password and expose port 3306
docker run -d --name mysql-server -p 3306:3306 -e MYSQL_RANDOM_ROOT_PASSWORD=yes mysql

Step 2: Check That All Containers Are Running
# List all running containers
docker ps

#Expected Output:
CONTAINER ID   IMAGE     COMMAND                  PORTS                    NAMES
xxxxxx         mysql     "docker-entrypoint.sâ€¦"   0.0.0.0:3306->3306/tcp   mysql-server
xxxxxx         httpd     "httpd-foreground"       0.0.0.0:8080->80/tcp     apache-server
xxxxxx         nginx     "/docker-entrypoint.â€¦"   0.0.0.0:80->80/tcp       nginx-server

# Check the logs of each container to ensure they are running correctly

docker logs nginx-server
docker logs apache-server
docker logs mysql-server

# Check the status of each container
docker inspect -f '{{.State.Status}}' nginx-server
docker inspect -f '{{.State.Status}}' apache-server
docker inspect -f '{{.State.Status}}' mysql-server

# Check the health of each container
docker inspect -f '{{.State.Health.Status}}' nginx-server
docker inspect -f '{{.State.Health.Status}}' apache-server
docker inspect -f '{{.State.Health.Status}}' mysql-server


Step 3: Get the MySQL Random Root Password

# Check the logs of the MySQL container to find the generated root password
docker logs mysql-server 2>&1 | grep 'GENERATED ROOT PASSWORD'



Step 4: Test Access (Optional but Good Practice)

# Access the Nginx and Apache HTTPD servers from your browser
Access http://localhost â†’ Nginx homepage

# Access the MySQL server using a MySQL client
Access http://localhost:8080 â†’ Apache HTTPD homepage


Step 5: Clean It All Up
# Stop containers
docker stop nginx-server apache-server mysql-server

# Remove containers
docker rm nginx-server apache-server mysql-server

# Remove images (optional)
To ensure cleanup:
docker rmi nginx-server apache-server mysql-server
# Check if the containers are removed
docker ps -a  # Should show no containers with those names

Step 6: Final Check
# Should return nothing if all are removed
docker ps -a | grep -E 'nginx-server|apache-server|mysql-server'





âœ… Assignment: DNS Round Robin Test

ðŸŽ¯ Objective
Demonstrate how Docker's virtual network and DNS Round Robin behavior works by setting up multiple containers that respond to the same DNS name using --network-alias.


Step 1: Create a User-defined Docker Network

docker network create mynet


Step 2: Run Two Elasticsearch Containers with the Same Network Alias

# Run elasticsearch-1
docker run -d --name es1 --net mynet --network-alias search elasticsearch:2

# Run elasticsearch-2
docker run -d --name es2 --net mynet --network-alias search elasticsearch:2

Both containers are in mynet and respond to the DNS name search.


Step 3: Test DNS Resolution with Alpine + nslookup

docker run --rm --net mynet alpine nslookup search


Expected output:

Name:      search
Addresses: 172.18.0.3
           172.18.0.4

This shows both containers (es1, es2) responding to the alias search.


Step 4: Curl Test from RockyLinux Container to See DNS Round Robin

# Run multiple curl calls to port 9200 of the alias 'search'
docker run --rm --net mynet rockylinux curl -s search:9200 | grep '"name"'

Repeat the above command several times. The response should alternate between the two container "name" values, for example:

  "name" : "3b1cfd3ea2bd"   # es1

  "name" : "d74a3d4a8e33"   # es2

Each call hits a different container â€” demonstrating round-robin DNS in action.


âœ… Step 5: Cleanup (Optional)

docker stop es1 es2
docker rm es1 es2
docker network rm mynet